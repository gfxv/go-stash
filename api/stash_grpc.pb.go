// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: stash.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transporter_SendChunks_FullMethodName         = "/Transporter/SendChunks"
	Transporter_GetDestination_FullMethodName     = "/Transporter/GetDestination"
	Transporter_ReceiveInfo_FullMethodName        = "/Transporter/ReceiveInfo"
	Transporter_ReceiveChunks_FullMethodName      = "/Transporter/ReceiveChunks"
	Transporter_SyncNodes_FullMethodName          = "/Transporter/SyncNodes"
	Transporter_AnnounceNewNode_FullMethodName    = "/Transporter/AnnounceNewNode"
	Transporter_AnnounceRemoveNode_FullMethodName = "/Transporter/AnnounceRemoveNode"
)

// TransporterClient is the client API for Transporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransporterClient interface {
	SendChunks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Chunk, StreamStatus], error)
	GetDestination(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*NodeInfo, error)
	ReceiveInfo(ctx context.Context, in *ReceiveInfoRequest, opts ...grpc.CallOption) (*ReceiveInfoResponse, error)
	ReceiveChunks(ctx context.Context, in *ReceiveChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveChunkResponse], error)
	SyncNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeInfo], error)
	AnnounceNewNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnnounceRemoveNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transporterClient struct {
	cc grpc.ClientConnInterface
}

func NewTransporterClient(cc grpc.ClientConnInterface) TransporterClient {
	return &transporterClient{cc}
}

func (c *transporterClient) SendChunks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Chunk, StreamStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transporter_ServiceDesc.Streams[0], Transporter_SendChunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Chunk, StreamStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transporter_SendChunksClient = grpc.ClientStreamingClient[Chunk, StreamStatus]

func (c *transporterClient) GetDestination(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, Transporter_GetDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transporterClient) ReceiveInfo(ctx context.Context, in *ReceiveInfoRequest, opts ...grpc.CallOption) (*ReceiveInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveInfoResponse)
	err := c.cc.Invoke(ctx, Transporter_ReceiveInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transporterClient) ReceiveChunks(ctx context.Context, in *ReceiveChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveChunkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transporter_ServiceDesc.Streams[1], Transporter_ReceiveChunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveChunkRequest, ReceiveChunkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transporter_ReceiveChunksClient = grpc.ServerStreamingClient[ReceiveChunkResponse]

func (c *transporterClient) SyncNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transporter_ServiceDesc.Streams[2], Transporter_SyncNodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, NodeInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transporter_SyncNodesClient = grpc.ServerStreamingClient[NodeInfo]

func (c *transporterClient) AnnounceNewNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Transporter_AnnounceNewNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transporterClient) AnnounceRemoveNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Transporter_AnnounceRemoveNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransporterServer is the server API for Transporter service.
// All implementations must embed UnimplementedTransporterServer
// for forward compatibility.
type TransporterServer interface {
	SendChunks(grpc.ClientStreamingServer[Chunk, StreamStatus]) error
	GetDestination(context.Context, *KeyRequest) (*NodeInfo, error)
	ReceiveInfo(context.Context, *ReceiveInfoRequest) (*ReceiveInfoResponse, error)
	ReceiveChunks(*ReceiveChunkRequest, grpc.ServerStreamingServer[ReceiveChunkResponse]) error
	SyncNodes(*emptypb.Empty, grpc.ServerStreamingServer[NodeInfo]) error
	AnnounceNewNode(context.Context, *NodeInfo) (*emptypb.Empty, error)
	AnnounceRemoveNode(context.Context, *NodeInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedTransporterServer()
}

// UnimplementedTransporterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransporterServer struct{}

func (UnimplementedTransporterServer) SendChunks(grpc.ClientStreamingServer[Chunk, StreamStatus]) error {
	return status.Errorf(codes.Unimplemented, "method SendChunks not implemented")
}
func (UnimplementedTransporterServer) GetDestination(context.Context, *KeyRequest) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestination not implemented")
}
func (UnimplementedTransporterServer) ReceiveInfo(context.Context, *ReceiveInfoRequest) (*ReceiveInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveInfo not implemented")
}
func (UnimplementedTransporterServer) ReceiveChunks(*ReceiveChunkRequest, grpc.ServerStreamingServer[ReceiveChunkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveChunks not implemented")
}
func (UnimplementedTransporterServer) SyncNodes(*emptypb.Empty, grpc.ServerStreamingServer[NodeInfo]) error {
	return status.Errorf(codes.Unimplemented, "method SyncNodes not implemented")
}
func (UnimplementedTransporterServer) AnnounceNewNode(context.Context, *NodeInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceNewNode not implemented")
}
func (UnimplementedTransporterServer) AnnounceRemoveNode(context.Context, *NodeInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceRemoveNode not implemented")
}
func (UnimplementedTransporterServer) mustEmbedUnimplementedTransporterServer() {}
func (UnimplementedTransporterServer) testEmbeddedByValue()                     {}

// UnsafeTransporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransporterServer will
// result in compilation errors.
type UnsafeTransporterServer interface {
	mustEmbedUnimplementedTransporterServer()
}

func RegisterTransporterServer(s grpc.ServiceRegistrar, srv TransporterServer) {
	// If the following call pancis, it indicates UnimplementedTransporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transporter_ServiceDesc, srv)
}

func _Transporter_SendChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransporterServer).SendChunks(&grpc.GenericServerStream[Chunk, StreamStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transporter_SendChunksServer = grpc.ClientStreamingServer[Chunk, StreamStatus]

func _Transporter_GetDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransporterServer).GetDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transporter_GetDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransporterServer).GetDestination(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transporter_ReceiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransporterServer).ReceiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transporter_ReceiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransporterServer).ReceiveInfo(ctx, req.(*ReceiveInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transporter_ReceiveChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransporterServer).ReceiveChunks(m, &grpc.GenericServerStream[ReceiveChunkRequest, ReceiveChunkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transporter_ReceiveChunksServer = grpc.ServerStreamingServer[ReceiveChunkResponse]

func _Transporter_SyncNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransporterServer).SyncNodes(m, &grpc.GenericServerStream[emptypb.Empty, NodeInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transporter_SyncNodesServer = grpc.ServerStreamingServer[NodeInfo]

func _Transporter_AnnounceNewNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransporterServer).AnnounceNewNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transporter_AnnounceNewNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransporterServer).AnnounceNewNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transporter_AnnounceRemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransporterServer).AnnounceRemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transporter_AnnounceRemoveNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransporterServer).AnnounceRemoveNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Transporter_ServiceDesc is the grpc.ServiceDesc for Transporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Transporter",
	HandlerType: (*TransporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDestination",
			Handler:    _Transporter_GetDestination_Handler,
		},
		{
			MethodName: "ReceiveInfo",
			Handler:    _Transporter_ReceiveInfo_Handler,
		},
		{
			MethodName: "AnnounceNewNode",
			Handler:    _Transporter_AnnounceNewNode_Handler,
		},
		{
			MethodName: "AnnounceRemoveNode",
			Handler:    _Transporter_AnnounceRemoveNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendChunks",
			Handler:       _Transporter_SendChunks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveChunks",
			Handler:       _Transporter_ReceiveChunks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncNodes",
			Handler:       _Transporter_SyncNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stash.proto",
}

const (
	HealthChecker_Healthcheck_FullMethodName = "/HealthChecker/Healthcheck"
)

// HealthCheckerClient is the client API for HealthChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckerClient interface {
	Healthcheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckerClient(cc grpc.ClientConnInterface) HealthCheckerClient {
	return &healthCheckerClient{cc}
}

func (c *healthCheckerClient) Healthcheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HealthChecker_Healthcheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckerServer is the server API for HealthChecker service.
// All implementations must embed UnimplementedHealthCheckerServer
// for forward compatibility.
type HealthCheckerServer interface {
	Healthcheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedHealthCheckerServer()
}

// UnimplementedHealthCheckerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthCheckerServer struct{}

func (UnimplementedHealthCheckerServer) Healthcheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedHealthCheckerServer) mustEmbedUnimplementedHealthCheckerServer() {}
func (UnimplementedHealthCheckerServer) testEmbeddedByValue()                       {}

// UnsafeHealthCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckerServer will
// result in compilation errors.
type UnsafeHealthCheckerServer interface {
	mustEmbedUnimplementedHealthCheckerServer()
}

func RegisterHealthCheckerServer(s grpc.ServiceRegistrar, srv HealthCheckerServer) {
	// If the following call pancis, it indicates UnimplementedHealthCheckerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthChecker_ServiceDesc, srv)
}

func _HealthChecker_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckerServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthChecker_Healthcheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckerServer).Healthcheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthChecker_ServiceDesc is the grpc.ServiceDesc for HealthChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HealthChecker",
	HandlerType: (*HealthCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthcheck",
			Handler:    _HealthChecker_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stash.proto",
}
